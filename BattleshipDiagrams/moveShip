system:System[a]
ship:Ship
grid:Grid[a]
cell:Cell
mine:Mine
otherShip:Ship
game:Game[a]

system:ship.moveShip(amountToMove:int, direction:Direction)
ship:(endCell, result)=grid.MovementUpdateCells(amountToMove, direction, ship)
[c:loop for ship.Size]
 grid:cell.setCellType(available)
[/c]
[c:loop for amountToMove]
 grid:cell.Type=cell.checkMove
 [c:opt cell.type = ship]
  cell:otherShip.crash(cell)
  --[cell.type = Mine]
  cell:mine.activate
 [c:alt cell.type != available]
   grid:break Loop
 [/c]
 grid:endCell \:= cell
 grid:amountChecked = # of cells checked
 grid:result = based on cell\.Type
 [/c]
[/c]
ship:grid.updatePosition(ship, endCell)
[c:loop for cells needed to be updated]
 grid:cell.setCellType(ship)
[/c]
ship:game.updateVisibility()
ship:ship.handleDamage(result)





